<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, IndexingInfo?, ProgramCounterInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id CDATA #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED initialValue CDATA #REQUIRED readOnly (true|false) "false" id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED carryBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED instructionFormat CDATA #REQUIRED assemblyFormat CDATA #REQUIRED instructionColors CDATA #REQUIRED assemblyColors CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT IndexingInfo EMPTY>
<!ATTLIST IndexingInfo indexFromRight CDATA "false">
<!ELEMENT ProgramCounterInfo EMPTY>
<!ATTLIST ProgramCounterInfo programCounter IDREF #REQUIRED>
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="PartA.cpu" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="unused12" type="ignored" numBits="12" relativity="absolute" signed="false" defaultValue="0" id="model.Field57917eff">
	</Field>
	<Field name="unused4" type="ignored" numBits="4" relativity="absolute" signed="false" defaultValue="0" id="model.Field4c5e3f5d">
	</Field>
	<Field name="addr" type="required" numBits="8" relativity="absolute" signed="false" defaultValue="0" id="model.Field65edc69f">
	</Field>
	<Field name="op" type="required" numBits="4" relativity="absolute" signed="false" defaultValue="0" id="model.Field363d2643">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="acc" width="16" initialValue="0" readOnly="false" id="model.module.Register6a87c0fd" />
	<Register name="ir" width="16" initialValue="0" readOnly="false" id="model.module.Register571eae27" />
	<Register name="mar" width="8" initialValue="0" readOnly="false" id="model.module.Register5c4c5365" />
	<Register name="mdr" width="16" initialValue="0" readOnly="false" id="model.module.Register39c6991" />
	<Register name="pc" width="8" initialValue="0" readOnly="false" id="model.module.Register57c8d137" />
	<Register name="status" width="8" initialValue="0" readOnly="false" id="model.module.Register7585227f" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="carry-bit" bit="1" register="model.module.Register7585227f" halt="false" id="model.module.ConditionBit77b17e8c" />
	<ConditionBit name="halt-bit" bit="0" register="model.module.Register7585227f" halt="true" id="model.module.ConditionBit4b6c80d1" />
	<ConditionBit name="overflow-bit" bit="3" register="model.module.Register7585227f" halt="false" id="model.module.ConditionBit4a261a49" />
	<ConditionBit name="underflow-bit" bit="2" register="model.module.Register7585227f" halt="false" id="model.module.ConditionBit5d053dd3" />

	<!--............. rams ..........................-->
	<RAM name="Main" length="256" cellSize="16" id="model.module.RAM2bdcb8cc" />

	<!--............. set ...........................-->
	<!-- none -->

	<!--............. test ..........................-->
	<Test name="if(acc!=0)skip-1" register="model.module.Register6a87c0fd" start="0" numBits="16" comparison="NE" value="0" omission="1" id="model.microinstruction.Test3a8c95e9" />
	<Test name="if(acc&lt;0)skip-1" register="model.module.Register6a87c0fd" start="0" numBits="16" comparison="LT" value="0" omission="1" id="model.microinstruction.Test6646de1d" />
	<Test name="if(acc==0)skip-1" register="model.module.Register6a87c0fd" start="0" numBits="16" comparison="EQ" value="0" omission="1" id="model.microinstruction.Test4903b00c" />
	<Test name="if(acc&gt;0)skip-1" register="model.module.Register6a87c0fd" start="0" numBits="16" comparison="GT" value="0" omission="1" id="model.microinstruction.Test7d77b38" />

	<!--............. increment .....................-->
	<Increment name="Incpc-1" register="model.module.Register57c8d137" overflowBit="model.module.ConditionBit4b6c80d1" delta="1" id="model.microinstruction.Increment59aa95f6" />

	<!--............. shift .........................-->
	<!-- none -->

	<!--............. logical .......................-->
	<!-- none -->

	<!--............. arithmetic ....................-->
	<Arithmetic name="acc+mdr-&gt;acc" type="ADD" source1="model.module.Register6a87c0fd" source2="model.module.Register39c6991" destination="model.module.Register6a87c0fd" overflowBit="model.module.ConditionBit4b6c80d1" id="model.microinstruction.Arithmetic94c0ee8" />
	<Arithmetic name="acc-mdr-&gt;acc" type="SUBTRACT" source1="model.module.Register6a87c0fd" source2="model.module.Register39c6991" destination="model.module.Register6a87c0fd" overflowBit="model.module.ConditionBit4b6c80d1" id="model.microinstruction.Arithmetic5d9b4c1d" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="acc-&gt;mdr" source="model.module.Register6a87c0fd" srcStartBit="0" dest="model.module.Register39c6991" destStartBit="0" numBits="16" id="model.microinstruction.TransferRtoR61a9e22d" />
	<TransferRtoR name="ir(8-15)-&gt;mar" source="model.module.Register571eae27" srcStartBit="8" dest="model.module.Register5c4c5365" destStartBit="0" numBits="8" id="model.microinstruction.TransferRtoR6c21decb" />
	<TransferRtoR name="ir(8-15)-&gt;pc" source="model.module.Register571eae27" srcStartBit="8" dest="model.module.Register57c8d137" destStartBit="0" numBits="8" id="model.microinstruction.TransferRtoR5f3a6e9" />
	<TransferRtoR name="mdr(8-15)-&gt;mar" source="model.module.Register39c6991" srcStartBit="8" dest="model.module.Register5c4c5365" destStartBit="0" numBits="8" id="model.microinstruction.TransferRtoR20fe9ee" />
	<TransferRtoR name="mdr-&gt;acc" source="model.module.Register39c6991" srcStartBit="0" dest="model.module.Register6a87c0fd" destStartBit="0" numBits="16" id="model.microinstruction.TransferRtoR2c19cb08" />
	<TransferRtoR name="mdr-&gt;ir" source="model.module.Register39c6991" srcStartBit="0" dest="model.module.Register571eae27" destStartBit="0" numBits="16" id="model.microinstruction.TransferRtoR4eac9fc6" />
	<TransferRtoR name="pc-&gt;mar" source="model.module.Register57c8d137" srcStartBit="0" dest="model.module.Register5c4c5365" destStartBit="0" numBits="8" id="model.microinstruction.TransferRtoR5670bc14" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="decode-ir" ir="model.module.Register571eae27" id="model.microinstruction.Decode2bcd6fad" />

	<!--............. set condition bit .............-->
	<SetCondBit name="set-halt-bit" bit="model.module.ConditionBit4b6c80d1" value="0" id="model.microinstruction.SetCondBit496eb057" />

	<!--............. io ............................-->
	<IO name="input-int-&gt;acc" direction="input" type="integer" buffer="model.module.Register6a87c0fd" connection="[Console]" id="model.microinstruction.IO63164413" />
	<IO name="output-acc-&gt;int" direction="output" type="integer" buffer="model.module.Register6a87c0fd" connection="[Console]" id="model.microinstruction.IO3055c479" />

	<!--............. memory access .................-->
	<MemoryAccess name="Main[mar]-&gt;mdr" direction="read" memory="model.module.RAM2bdcb8cc" data="model.module.Register39c6991" address="model.module.Register5c4c5365" id="model.microinstruction.MemoryAccess702565d9" />
	<MemoryAccess name="mdr-&gt;Main[mar]" direction="write" memory="model.module.RAM2bdcb8cc" data="model.module.Register39c6991" address="model.module.Register5c4c5365" id="model.microinstruction.MemoryAccess4cf58f82" />

	<!--............. end ...........................-->
	<End id="model.microinstruction.End1d126cd3" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="model.microinstruction.TransferRtoR5670bc14" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess702565d9" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR4eac9fc6" />
		<Microinstruction microRef="model.microinstruction.Increment59aa95f6" />
		<Microinstruction microRef="model.microinstruction.Decode2bcd6fad" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="m2a" opcode="e" instructionFormat="op unused4 addr" assemblyFormat="op addr" instructionColors="#e1bfba #aac6bc #cb9fc7" assemblyColors="#e1bfba #cb9fc7" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR6c21decb" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess702565d9" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR20fe9ee" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess702565d9" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR2c19cb08" />
		<Microinstruction microRef="model.microinstruction.End1d126cd3" />
	</MachineInstruction>

	<MachineInstruction name="m2m" opcode="d" instructionFormat="op unused4 addr" assemblyFormat="op addr" instructionColors="#c1cbac #f6c78f #dc9786" assemblyColors="#c1cbac #dc9786" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR6c21decb" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess702565d9" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR20fe9ee" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR61a9e22d" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess4cf58f82" />
		<Microinstruction microRef="model.microinstruction.End1d126cd3" />
	</MachineInstruction>

	<MachineInstruction name="sub" opcode="b" instructionFormat="op unused4 addr" assemblyFormat="op addr" instructionColors="#f4ccaf #9b91c9 #e2d7d3" assemblyColors="#f4ccaf #e2d7d3" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR6c21decb" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess702565d9" />
		<Microinstruction microRef="model.microinstruction.Arithmetic5d9b4c1d" />
		<Microinstruction microRef="model.microinstruction.End1d126cd3" />
	</MachineInstruction>

	<MachineInstruction name="add" opcode="a" instructionFormat="op unused4 addr" assemblyFormat="op addr" instructionColors="#f3fc9e #d59ad7 #bbfb8f" assemblyColors="#f3fc9e #bbfb8f" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR6c21decb" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess702565d9" />
		<Microinstruction microRef="model.microinstruction.Arithmetic94c0ee8" />
		<Microinstruction microRef="model.microinstruction.End1d126cd3" />
	</MachineInstruction>

	<MachineInstruction name="stop" opcode="9" instructionFormat="op unused12" assemblyFormat="op" instructionColors="#9de5e7 #a187ef" assemblyColors="#9de5e7" >
		<Microinstruction microRef="model.microinstruction.SetCondBit496eb057" />
		<Microinstruction microRef="model.microinstruction.End1d126cd3" />
	</MachineInstruction>

	<MachineInstruction name="opa" opcode="8" instructionFormat="op unused12" assemblyFormat="op" instructionColors="#cfeeaa #e1c7bb" assemblyColors="#cfeeaa" >
		<Microinstruction microRef="model.microinstruction.IO3055c479" />
		<Microinstruction microRef="model.microinstruction.End1d126cd3" />
	</MachineInstruction>

	<MachineInstruction name="ipa" opcode="7" instructionFormat="op unused12" assemblyFormat="op" instructionColors="#c6d4b3 #94a2fe" assemblyColors="#c6d4b3" >
		<Microinstruction microRef="model.microinstruction.IO63164413" />
		<Microinstruction microRef="model.microinstruction.End1d126cd3" />
	</MachineInstruction>

	<MachineInstruction name="sta" opcode="6" instructionFormat="op unused4 addr" assemblyFormat="op addr" instructionColors="#fae0f7 #db8c95 #f080fa" assemblyColors="#fae0f7 #f080fa" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR6c21decb" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR61a9e22d" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess4cf58f82" />
		<Microinstruction microRef="model.microinstruction.End1d126cd3" />
	</MachineInstruction>

	<MachineInstruction name="lda" opcode="5" instructionFormat="op unused4 addr" assemblyFormat="op addr" instructionColors="#ba8fd8 #ebb690 #afe7c6" assemblyColors="#ba8fd8 #afe7c6" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR6c21decb" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess702565d9" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR2c19cb08" />
		<Microinstruction microRef="model.microinstruction.End1d126cd3" />
	</MachineInstruction>

	<MachineInstruction name="jmpn" opcode="4" instructionFormat="op unused4 addr" assemblyFormat="op addr" instructionColors="#fdf69f #f08d96 #cfd8de" assemblyColors="#fdf69f #cfd8de" >
		<Microinstruction microRef="model.microinstruction.Test7d77b38" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR5f3a6e9" />
		<Microinstruction microRef="model.microinstruction.End1d126cd3" />
	</MachineInstruction>

	<MachineInstruction name="jmpp" opcode="3" instructionFormat="op unused4 addr" assemblyFormat="op addr" instructionColors="#93b181 #e9f2a9 #88ccea" assemblyColors="#93b181 #88ccea" >
		<Microinstruction microRef="model.microinstruction.Test6646de1d" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR5f3a6e9" />
		<Microinstruction microRef="model.microinstruction.End1d126cd3" />
	</MachineInstruction>

	<MachineInstruction name="jmpnz" opcode="2" instructionFormat="op unused4 addr" assemblyFormat="op addr" instructionColors="#88edbf #e5cbbf #93a0e8" assemblyColors="#88edbf #93a0e8" >
		<Microinstruction microRef="model.microinstruction.Test4903b00c" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR5f3a6e9" />
		<Microinstruction microRef="model.microinstruction.End1d126cd3" />
	</MachineInstruction>

	<MachineInstruction name="jmpz" opcode="1" instructionFormat="op unused4 addr" assemblyFormat="op addr" instructionColors="#e3dfc2 #b6829b #ade582" assemblyColors="#e3dfc2 #ade582" >
		<Microinstruction microRef="model.microinstruction.Test3a8c95e9" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR5f3a6e9" />
		<Microinstruction microRef="model.microinstruction.End1d126cd3" />
	</MachineInstruction>

	<MachineInstruction name="jmp" opcode="0" instructionFormat="op unused4 addr" assemblyFormat="op addr" instructionColors="#9df8b9 #e7a3c7 #a5e6c8" assemblyColors="#9df8b9 #a5e6c8" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR5f3a6e9" />
		<Microinstruction microRef="model.microinstruction.End1d126cd3" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
		<RegisterRAMPair register="model.module.Register57c8d137" ram="model.module.RAM2bdcb8cc" dynamic="false" />
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="model.module.RAM2bdcb8cc" startingAddress="0" />

	<!--............. indexing info ............-->
	<IndexingInfo indexFromRight="false" />

	<!--............. program counter info ..................-->

</Machine>
